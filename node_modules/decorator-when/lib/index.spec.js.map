{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;;;;;;AAAA,sBAAoB,OACpB,CAAC,CAD0B;AAC3B,qBAAuB,MACvB,CAAC,CAD4B;AAC7B,IAAO,IAAI,WAAW,SAAS,CAAC,CAAA;AAEhC,QAAQ,CAAC,gBAAgB,EAAE;IACzB,EAAE,CAAC,2BAA2B,EAAE;QAC9B,IAAM,CAAC,GAAG,WAAG,EAAE,CAAA;QAEf;YAAA;YAQA,CAAC;YANC,qBAAM,GAAN;gBACE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;YAC1B,CAAC;YACD,qBAAM,GAAN;gBACE,MAAM,CAAC,IAAI,CAAA;YACb,CAAC;YAND;gBAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;8CAAA;YAO9B,WAAC;QAAD,CAAC,AARD,IAQC;QAED,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAA;QAEnB,aAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IACjC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,+BAA+B,EAAE;QAClC,IAAM,CAAC,GAAG,WAAG,EAAE,CAAA;QAEf;YAAA;YAQA,CAAC;YANC,qBAAM,GAAN;gBACE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;YAC1B,CAAC;YACD,qBAAM,GAAN;gBACE,MAAM,CAAC,KAAK,CAAA;YACd,CAAC;YAND;gBAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;8CAAA;YAO9B,WAAC;QAAD,CAAC,AARD,IAQC;QAED,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,CAAA;QAEnB,aAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IACjC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE;QACzC;YAAA;YAIA,CAAC;YAFC,sBAAI,sBAAI;qBAAR,cAAc,MAAM,CAAC,IAAI,CAAA,CAAC,CAAC;qBAC3B,UAAU,CAAM,IAAG,CAAC;;;eADO;YAD3B;gBAAC,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;4CAAA;YAGnB,WAAC;QAAD,CAAC,AAJD,IAIC;QAED,aAAM,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;IACpC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { spy } from 'sinon'\nimport { expect } from 'chai'\nimport when = require('./index')\n\ndescribe('decorator when', () => {\n  it('should execute the method', () => {\n    const s = spy()\n\n    class Demo {\n      @when(Demo.prototype.should)\n      method () {\n        s.apply(this, arguments)\n      }\n      should () {\n        return true\n      }\n    }\n\n    new Demo().method()\n\n    expect(s.callCount).to.equal(1)\n  })\n\n  it('should not execute the method', () => {\n    const s = spy()\n\n    class Demo {\n      @when(Demo.prototype.should)\n      method () {\n        s.apply(this, arguments)\n      }\n      should () {\n        return false\n      }\n    }\n\n    new Demo().method()\n\n    expect(s.callCount).to.equal(0)\n  })\n\n  it('should work with getters and setters', () => {\n    class Demo {\n      @when(() => true)\n      get prop () { return true }\n      set prop (x: any) {}\n    }\n\n    expect(new Demo().prop).to.be.true\n  })\n})\n"]}