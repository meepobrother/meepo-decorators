"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var sinon_1 = require('sinon');
var chai_1 = require('chai');
var when = require('./index');
describe('decorator when', function () {
    it('should execute the method', function () {
        var s = sinon_1.spy();
        var Demo = (function () {
            function Demo() {
            }
            Demo.prototype.method = function () {
                s.apply(this, arguments);
            };
            Demo.prototype.should = function () {
                return true;
            };
            __decorate([
                when(Demo.prototype.should)
            ], Demo.prototype, "method", null);
            return Demo;
        }());
        new Demo().method();
        chai_1.expect(s.callCount).to.equal(1);
    });
    it('should not execute the method', function () {
        var s = sinon_1.spy();
        var Demo = (function () {
            function Demo() {
            }
            Demo.prototype.method = function () {
                s.apply(this, arguments);
            };
            Demo.prototype.should = function () {
                return false;
            };
            __decorate([
                when(Demo.prototype.should)
            ], Demo.prototype, "method", null);
            return Demo;
        }());
        new Demo().method();
        chai_1.expect(s.callCount).to.equal(0);
    });
    it('should work with getters and setters', function () {
        var Demo = (function () {
            function Demo() {
            }
            Object.defineProperty(Demo.prototype, "prop", {
                get: function () { return true; },
                set: function (x) { },
                enumerable: true,
                configurable: true
            });
            __decorate([
                when(function () { return true; })
            ], Demo.prototype, "prop", null);
            return Demo;
        }());
        chai_1.expect(new Demo().prop).to.be.true;
    });
});
//# sourceMappingURL=index.spec.js.map